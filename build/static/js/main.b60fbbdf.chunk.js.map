{"version":3,"sources":["SearchArea.js","BookCard.js","BookList.js","Book.js","App.js","serviceWorker.js","index.js"],"names":["SearchArea","props","onSubmit","searchBook","action","type","onChange","handleSearch","placeholder","BookCard","className","src","image","alt","title","line","element","truncateText","text","description","BookList","books","map","book","i","key","volumeInfo","imageLinks","thumbnail","Book","e","preventDefault","request","get","query","q","state","searchField","then","data","console","log","setState","body","items","target","value","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sTAaeA,EAXI,SAACC,GAChB,OACI,6BACI,0BAAMC,SAAUD,EAAME,WAAYC,OAAO,KACrC,2BAAOC,KAAK,OAAOC,SAAUL,EAAMM,aAAcC,YAAY,oBAC7D,4BAAQH,KAAK,UAAb,a,wCCcDI,EAjBE,SAACR,GACd,OACI,yBAAKS,UAAU,kBACX,yBAAKC,IAAKV,EAAMW,MAAOC,IAAI,GAAGH,UAAU,oBACxC,yBAAKA,UAAU,sBACX,4BAAKT,EAAMa,OACX,2BAAG,kBAAC,IAAD,CACHC,KAAM,EACNC,QAAQ,OACRC,aAAa,MACbC,KAAMjB,EAAMkB,kBCQbC,G,MAlBE,SAACnB,GACd,OACI,yBAAKS,UAAU,kBAEPT,EAAMoB,MAAMC,KAAI,SAACC,EAAMC,GACnB,OAAO,kBAAC,EAAD,CACPC,IAAKD,EACLZ,MAAOW,EAAKG,WAAWC,WAAWC,UAClCd,MAAOS,EAAKG,WAAWZ,MACvBK,YAAaI,EAAKG,WAAWP,oBC4BlCU,E,kDAlCX,WAAY5B,GAAO,IAAD,8BACd,cAAMA,IAOVE,WAAa,SAAC2B,GACVA,EAAEC,iBACFC,IACKC,IAAI,+CACJC,MAAM,CAAEC,EAAG,EAAKC,MAAMC,cACtBC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAErB,MAAM,YAAKkB,EAAKI,KAAKC,aAf/B,EAmBlBrC,aAAe,SAACuB,GACZU,QAAQC,IAAIX,EAAEe,OAAOC,OACrB,EAAKJ,SAAS,CAACL,YAAaP,EAAEe,OAAOC,SAnBrC,EAAKV,MAAQ,CACTf,MAAO,GACPgB,YAAa,IAJH,E,qDAyBd,OACI,6BACI,kBAAC,EAAD,CAAYlC,WAAY4C,KAAK5C,WAAYI,aAAcwC,KAAKxC,eAC5D,kBAAC,EAAD,CAAUc,MAAO0B,KAAKX,MAAMf,a,GA9BzB2B,aCYJC,MAbf,WAEE,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,QCIcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.b60fbbdf.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst SearchArea = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.searchBook} action=\"e\">\r\n                <input type=\"text\" onChange={props.handleSearch} placeholder=\"Enter book name\"/>\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchArea;\r\n","import React from 'react';\r\nimport \"./BookCard.css\";\r\nimport TextTruncate from 'react-text-truncate';\r\n\r\nconst BookCard = (props) => {\r\n    return (\r\n        <div className=\"BookCard__card\">\r\n            <img src={props.image} alt=\"\" className=\"BookCard__image\" />\r\n            <div className=\"BookCard__cardtext\">\r\n                <h4>{props.title}</h4>\r\n                <p><TextTruncate\r\n                line={4}\r\n                element=\"span\"\r\n                truncateText=\"...\"\r\n                text={props.description}               \r\n                /></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BookCard;\r\n","import React from 'react'\r\nimport BookCard from './BookCard.js';\r\nimport \"./BookList.css\";\r\n\r\nconst BookList = (props) => {\r\n    return (\r\n        <div className=\"BookList__list\">\r\n            {\r\n                props.books.map((book, i)=>{\r\n                    return <BookCard \r\n                    key={i}\r\n                    image={book.volumeInfo.imageLinks.thumbnail}\r\n                    title={book.volumeInfo.title}\r\n                    description={book.volumeInfo.description}\r\n\r\n                     />\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BookList;\r\n","import React, {Component} from 'react';\r\nimport SearchArea from './SearchArea.js'\r\nimport request from 'superagent';\r\nimport BookList from './BookList.js';\r\n\r\nclass Book extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            books: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    searchBook = (e) =>{\r\n        e.preventDefault();\r\n        request\r\n            .get(\"https://www.googleapis.com/books/v1/volumes\")\r\n            .query({ q: this.state.searchField })\r\n            .then((data) =>{\r\n                console.log(data);\r\n                this.setState({ books: [...data.body.items]})\r\n            })\r\n    }\r\n\r\n    handleSearch = (e) =>{\r\n        console.log(e.target.value)\r\n        this.setState({searchField: e.target.value })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <SearchArea searchBook={this.searchBook} handleSearch={this.handleSearch}/>\r\n                <BookList books={this.state.books}/> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Book;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Book from \"./Book.js\"\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Book/>\r\n    {/* <form>\r\n      <input type='text' className='App__TextInput' placeholder='Enter book name' value={input} onChange={event => setInput(event.target.value)} />\r\n      <button type='button' className='App__Button' disabled={!input} >Search</button>\r\n    </form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}